// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: crypto_protocol.proto
// Protobuf C++ Version: 5.29.2

#ifndef crypto_5fprotocol_2eproto_2epb_2eh
#define crypto_5fprotocol_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029002
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_crypto_5fprotocol_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_crypto_5fprotocol_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_crypto_5fprotocol_2eproto;
namespace crypto {
class AESKeyDelivery;
struct AESKeyDeliveryDefaultTypeInternal;
extern AESKeyDeliveryDefaultTypeInternal _AESKeyDelivery_default_instance_;
class ChatMessage;
struct ChatMessageDefaultTypeInternal;
extern ChatMessageDefaultTypeInternal _ChatMessage_default_instance_;
class ClientPublicKey;
struct ClientPublicKeyDefaultTypeInternal;
extern ClientPublicKeyDefaultTypeInternal _ClientPublicKey_default_instance_;
class GameData;
struct GameDataDefaultTypeInternal;
extern GameDataDefaultTypeInternal _GameData_default_instance_;
class HandshakeComplete;
struct HandshakeCompleteDefaultTypeInternal;
extern HandshakeCompleteDefaultTypeInternal _HandshakeComplete_default_instance_;
class ServerPublicKey;
struct ServerPublicKeyDefaultTypeInternal;
extern ServerPublicKeyDefaultTypeInternal _ServerPublicKey_default_instance_;
class ServerResponse;
struct ServerResponseDefaultTypeInternal;
extern ServerResponseDefaultTypeInternal _ServerResponse_default_instance_;
}  // namespace crypto
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace crypto {

// ===================================================================


// -------------------------------------------------------------------

class ServerResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:crypto.ServerResponse) */ {
 public:
  inline ServerResponse() : ServerResponse(nullptr) {}
  ~ServerResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ServerResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ServerResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ServerResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline ServerResponse(const ServerResponse& from) : ServerResponse(nullptr, from) {}
  inline ServerResponse(ServerResponse&& from) noexcept
      : ServerResponse(nullptr, std::move(from)) {}
  inline ServerResponse& operator=(const ServerResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerResponse& operator=(ServerResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ServerResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServerResponse* internal_default_instance() {
    return reinterpret_cast<const ServerResponse*>(
        &_ServerResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 6;
  friend void swap(ServerResponse& a, ServerResponse& b) { a.Swap(&b); }
  inline void Swap(ServerResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ServerResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ServerResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ServerResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ServerResponse& from) { ServerResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ServerResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "crypto.ServerResponse"; }

 protected:
  explicit ServerResponse(::google::protobuf::Arena* arena);
  ServerResponse(::google::protobuf::Arena* arena, const ServerResponse& from);
  ServerResponse(::google::protobuf::Arena* arena, ServerResponse&& from) noexcept
      : ServerResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kResultMessageFieldNumber = 3,
    kDataFieldNumber = 4,
    kRequestIdFieldNumber = 1,
    kResultCodeFieldNumber = 2,
  };
  // string result_message = 3;
  void clear_result_message() ;
  const std::string& result_message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_result_message(Arg_&& arg, Args_... args);
  std::string* mutable_result_message();
  PROTOBUF_NODISCARD std::string* release_result_message();
  void set_allocated_result_message(std::string* value);

  private:
  const std::string& _internal_result_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_result_message(
      const std::string& value);
  std::string* _internal_mutable_result_message();

  public:
  // string data = 4;
  void clear_data() ;
  const std::string& data() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_data(Arg_&& arg, Args_... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* value);

  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(
      const std::string& value);
  std::string* _internal_mutable_data();

  public:
  // uint32 request_id = 1;
  void clear_request_id() ;
  ::uint32_t request_id() const;
  void set_request_id(::uint32_t value);

  private:
  ::uint32_t _internal_request_id() const;
  void _internal_set_request_id(::uint32_t value);

  public:
  // int32 result_code = 2;
  void clear_result_code() ;
  ::int32_t result_code() const;
  void set_result_code(::int32_t value);

  private:
  ::int32_t _internal_result_code() const;
  void _internal_set_result_code(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:crypto.ServerResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      48, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ServerResponse& from_msg);
    ::google::protobuf::internal::ArenaStringPtr result_message_;
    ::google::protobuf::internal::ArenaStringPtr data_;
    ::uint32_t request_id_;
    ::int32_t result_code_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_crypto_5fprotocol_2eproto;
};
// -------------------------------------------------------------------

class ServerPublicKey final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:crypto.ServerPublicKey) */ {
 public:
  inline ServerPublicKey() : ServerPublicKey(nullptr) {}
  ~ServerPublicKey() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ServerPublicKey* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ServerPublicKey));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ServerPublicKey(
      ::google::protobuf::internal::ConstantInitialized);

  inline ServerPublicKey(const ServerPublicKey& from) : ServerPublicKey(nullptr, from) {}
  inline ServerPublicKey(ServerPublicKey&& from) noexcept
      : ServerPublicKey(nullptr, std::move(from)) {}
  inline ServerPublicKey& operator=(const ServerPublicKey& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerPublicKey& operator=(ServerPublicKey&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ServerPublicKey& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServerPublicKey* internal_default_instance() {
    return reinterpret_cast<const ServerPublicKey*>(
        &_ServerPublicKey_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(ServerPublicKey& a, ServerPublicKey& b) { a.Swap(&b); }
  inline void Swap(ServerPublicKey* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerPublicKey* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ServerPublicKey* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ServerPublicKey>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ServerPublicKey& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ServerPublicKey& from) { ServerPublicKey::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ServerPublicKey* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "crypto.ServerPublicKey"; }

 protected:
  explicit ServerPublicKey(::google::protobuf::Arena* arena);
  ServerPublicKey(::google::protobuf::Arena* arena, const ServerPublicKey& from);
  ServerPublicKey(::google::protobuf::Arena* arena, ServerPublicKey&& from) noexcept
      : ServerPublicKey(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kRsaPublicKeyFieldNumber = 1,
    kServerVersionFieldNumber = 2,
    kSessionIdFieldNumber = 3,
  };
  // string rsa_public_key = 1;
  void clear_rsa_public_key() ;
  const std::string& rsa_public_key() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_rsa_public_key(Arg_&& arg, Args_... args);
  std::string* mutable_rsa_public_key();
  PROTOBUF_NODISCARD std::string* release_rsa_public_key();
  void set_allocated_rsa_public_key(std::string* value);

  private:
  const std::string& _internal_rsa_public_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_rsa_public_key(
      const std::string& value);
  std::string* _internal_mutable_rsa_public_key();

  public:
  // string server_version = 2;
  void clear_server_version() ;
  const std::string& server_version() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_server_version(Arg_&& arg, Args_... args);
  std::string* mutable_server_version();
  PROTOBUF_NODISCARD std::string* release_server_version();
  void set_allocated_server_version(std::string* value);

  private:
  const std::string& _internal_server_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_server_version(
      const std::string& value);
  std::string* _internal_mutable_server_version();

  public:
  // uint32 session_id = 3;
  void clear_session_id() ;
  ::uint32_t session_id() const;
  void set_session_id(::uint32_t value);

  private:
  ::uint32_t _internal_session_id() const;
  void _internal_set_session_id(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:crypto.ServerPublicKey)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      59, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ServerPublicKey& from_msg);
    ::google::protobuf::internal::ArenaStringPtr rsa_public_key_;
    ::google::protobuf::internal::ArenaStringPtr server_version_;
    ::uint32_t session_id_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_crypto_5fprotocol_2eproto;
};
// -------------------------------------------------------------------

class HandshakeComplete final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:crypto.HandshakeComplete) */ {
 public:
  inline HandshakeComplete() : HandshakeComplete(nullptr) {}
  ~HandshakeComplete() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(HandshakeComplete* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(HandshakeComplete));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR HandshakeComplete(
      ::google::protobuf::internal::ConstantInitialized);

  inline HandshakeComplete(const HandshakeComplete& from) : HandshakeComplete(nullptr, from) {}
  inline HandshakeComplete(HandshakeComplete&& from) noexcept
      : HandshakeComplete(nullptr, std::move(from)) {}
  inline HandshakeComplete& operator=(const HandshakeComplete& from) {
    CopyFrom(from);
    return *this;
  }
  inline HandshakeComplete& operator=(HandshakeComplete&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HandshakeComplete& default_instance() {
    return *internal_default_instance();
  }
  static inline const HandshakeComplete* internal_default_instance() {
    return reinterpret_cast<const HandshakeComplete*>(
        &_HandshakeComplete_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(HandshakeComplete& a, HandshakeComplete& b) { a.Swap(&b); }
  inline void Swap(HandshakeComplete* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HandshakeComplete* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HandshakeComplete* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<HandshakeComplete>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const HandshakeComplete& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const HandshakeComplete& from) { HandshakeComplete::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(HandshakeComplete* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "crypto.HandshakeComplete"; }

 protected:
  explicit HandshakeComplete(::google::protobuf::Arena* arena);
  HandshakeComplete(::google::protobuf::Arena* arena, const HandshakeComplete& from);
  HandshakeComplete(::google::protobuf::Arena* arena, HandshakeComplete&& from) noexcept
      : HandshakeComplete(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kStatusFieldNumber = 2,
    kTestMessageFieldNumber = 3,
    kSessionIdFieldNumber = 1,
  };
  // string status = 2;
  void clear_status() ;
  const std::string& status() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_status(Arg_&& arg, Args_... args);
  std::string* mutable_status();
  PROTOBUF_NODISCARD std::string* release_status();
  void set_allocated_status(std::string* value);

  private:
  const std::string& _internal_status() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_status(
      const std::string& value);
  std::string* _internal_mutable_status();

  public:
  // string test_message = 3;
  void clear_test_message() ;
  const std::string& test_message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_test_message(Arg_&& arg, Args_... args);
  std::string* mutable_test_message();
  PROTOBUF_NODISCARD std::string* release_test_message();
  void set_allocated_test_message(std::string* value);

  private:
  const std::string& _internal_test_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_test_message(
      const std::string& value);
  std::string* _internal_mutable_test_message();

  public:
  // uint32 session_id = 1;
  void clear_session_id() ;
  ::uint32_t session_id() const;
  void set_session_id(::uint32_t value);

  private:
  ::uint32_t _internal_session_id() const;
  void _internal_set_session_id(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:crypto.HandshakeComplete)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      51, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const HandshakeComplete& from_msg);
    ::google::protobuf::internal::ArenaStringPtr status_;
    ::google::protobuf::internal::ArenaStringPtr test_message_;
    ::uint32_t session_id_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_crypto_5fprotocol_2eproto;
};
// -------------------------------------------------------------------

class GameData final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:crypto.GameData) */ {
 public:
  inline GameData() : GameData(nullptr) {}
  ~GameData() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(GameData* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(GameData));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GameData(
      ::google::protobuf::internal::ConstantInitialized);

  inline GameData(const GameData& from) : GameData(nullptr, from) {}
  inline GameData(GameData&& from) noexcept
      : GameData(nullptr, std::move(from)) {}
  inline GameData& operator=(const GameData& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameData& operator=(GameData&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GameData& default_instance() {
    return *internal_default_instance();
  }
  static inline const GameData* internal_default_instance() {
    return reinterpret_cast<const GameData*>(
        &_GameData_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(GameData& a, GameData& b) { a.Swap(&b); }
  inline void Swap(GameData* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameData* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GameData* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<GameData>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GameData& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GameData& from) { GameData::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(GameData* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "crypto.GameData"; }

 protected:
  explicit GameData(::google::protobuf::Arena* arena);
  GameData(::google::protobuf::Arena* arena, const GameData& from);
  GameData(::google::protobuf::Arena* arena, GameData&& from) noexcept
      : GameData(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kPayloadFieldNumber = 3,
    kTimestampFieldNumber = 2,
    kMessageTypeFieldNumber = 1,
  };
  // string payload = 3;
  void clear_payload() ;
  const std::string& payload() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_payload(Arg_&& arg, Args_... args);
  std::string* mutable_payload();
  PROTOBUF_NODISCARD std::string* release_payload();
  void set_allocated_payload(std::string* value);

  private:
  const std::string& _internal_payload() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_payload(
      const std::string& value);
  std::string* _internal_mutable_payload();

  public:
  // uint64 timestamp = 2;
  void clear_timestamp() ;
  ::uint64_t timestamp() const;
  void set_timestamp(::uint64_t value);

  private:
  ::uint64_t _internal_timestamp() const;
  void _internal_set_timestamp(::uint64_t value);

  public:
  // uint32 message_type = 1;
  void clear_message_type() ;
  ::uint32_t message_type() const;
  void set_message_type(::uint32_t value);

  private:
  ::uint32_t _internal_message_type() const;
  void _internal_set_message_type(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:crypto.GameData)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      31, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const GameData& from_msg);
    ::google::protobuf::internal::ArenaStringPtr payload_;
    ::uint64_t timestamp_;
    ::uint32_t message_type_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_crypto_5fprotocol_2eproto;
};
// -------------------------------------------------------------------

class ClientPublicKey final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:crypto.ClientPublicKey) */ {
 public:
  inline ClientPublicKey() : ClientPublicKey(nullptr) {}
  ~ClientPublicKey() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ClientPublicKey* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ClientPublicKey));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ClientPublicKey(
      ::google::protobuf::internal::ConstantInitialized);

  inline ClientPublicKey(const ClientPublicKey& from) : ClientPublicKey(nullptr, from) {}
  inline ClientPublicKey(ClientPublicKey&& from) noexcept
      : ClientPublicKey(nullptr, std::move(from)) {}
  inline ClientPublicKey& operator=(const ClientPublicKey& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientPublicKey& operator=(ClientPublicKey&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ClientPublicKey& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClientPublicKey* internal_default_instance() {
    return reinterpret_cast<const ClientPublicKey*>(
        &_ClientPublicKey_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(ClientPublicKey& a, ClientPublicKey& b) { a.Swap(&b); }
  inline void Swap(ClientPublicKey* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientPublicKey* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClientPublicKey* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ClientPublicKey>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ClientPublicKey& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ClientPublicKey& from) { ClientPublicKey::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ClientPublicKey* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "crypto.ClientPublicKey"; }

 protected:
  explicit ClientPublicKey(::google::protobuf::Arena* arena);
  ClientPublicKey(::google::protobuf::Arena* arena, const ClientPublicKey& from);
  ClientPublicKey(::google::protobuf::Arena* arena, ClientPublicKey&& from) noexcept
      : ClientPublicKey(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kRsaPublicKeyFieldNumber = 1,
    kClientVersionFieldNumber = 2,
  };
  // string rsa_public_key = 1;
  void clear_rsa_public_key() ;
  const std::string& rsa_public_key() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_rsa_public_key(Arg_&& arg, Args_... args);
  std::string* mutable_rsa_public_key();
  PROTOBUF_NODISCARD std::string* release_rsa_public_key();
  void set_allocated_rsa_public_key(std::string* value);

  private:
  const std::string& _internal_rsa_public_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_rsa_public_key(
      const std::string& value);
  std::string* _internal_mutable_rsa_public_key();

  public:
  // string client_version = 2;
  void clear_client_version() ;
  const std::string& client_version() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_client_version(Arg_&& arg, Args_... args);
  std::string* mutable_client_version();
  PROTOBUF_NODISCARD std::string* release_client_version();
  void set_allocated_client_version(std::string* value);

  private:
  const std::string& _internal_client_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_client_version(
      const std::string& value);
  std::string* _internal_mutable_client_version();

  public:
  // @@protoc_insertion_point(class_scope:crypto.ClientPublicKey)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      59, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ClientPublicKey& from_msg);
    ::google::protobuf::internal::ArenaStringPtr rsa_public_key_;
    ::google::protobuf::internal::ArenaStringPtr client_version_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_crypto_5fprotocol_2eproto;
};
// -------------------------------------------------------------------

class ChatMessage final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:crypto.ChatMessage) */ {
 public:
  inline ChatMessage() : ChatMessage(nullptr) {}
  ~ChatMessage() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ChatMessage* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ChatMessage));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ChatMessage(
      ::google::protobuf::internal::ConstantInitialized);

  inline ChatMessage(const ChatMessage& from) : ChatMessage(nullptr, from) {}
  inline ChatMessage(ChatMessage&& from) noexcept
      : ChatMessage(nullptr, std::move(from)) {}
  inline ChatMessage& operator=(const ChatMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChatMessage& operator=(ChatMessage&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChatMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChatMessage* internal_default_instance() {
    return reinterpret_cast<const ChatMessage*>(
        &_ChatMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(ChatMessage& a, ChatMessage& b) { a.Swap(&b); }
  inline void Swap(ChatMessage* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChatMessage* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChatMessage* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ChatMessage>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ChatMessage& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ChatMessage& from) { ChatMessage::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ChatMessage* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "crypto.ChatMessage"; }

 protected:
  explicit ChatMessage(::google::protobuf::Arena* arena);
  ChatMessage(::google::protobuf::Arena* arena, const ChatMessage& from);
  ChatMessage(::google::protobuf::Arena* arena, ChatMessage&& from) noexcept
      : ChatMessage(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kUsernameFieldNumber = 2,
    kMessageFieldNumber = 3,
    kTimestampFieldNumber = 4,
    kUserIdFieldNumber = 1,
  };
  // string username = 2;
  void clear_username() ;
  const std::string& username() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_username(Arg_&& arg, Args_... args);
  std::string* mutable_username();
  PROTOBUF_NODISCARD std::string* release_username();
  void set_allocated_username(std::string* value);

  private:
  const std::string& _internal_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_username(
      const std::string& value);
  std::string* _internal_mutable_username();

  public:
  // string message = 3;
  void clear_message() ;
  const std::string& message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message(Arg_&& arg, Args_... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* value);

  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(
      const std::string& value);
  std::string* _internal_mutable_message();

  public:
  // uint64 timestamp = 4;
  void clear_timestamp() ;
  ::uint64_t timestamp() const;
  void set_timestamp(::uint64_t value);

  private:
  ::uint64_t _internal_timestamp() const;
  void _internal_set_timestamp(::uint64_t value);

  public:
  // uint32 user_id = 1;
  void clear_user_id() ;
  ::uint32_t user_id() const;
  void set_user_id(::uint32_t value);

  private:
  ::uint32_t _internal_user_id() const;
  void _internal_set_user_id(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:crypto.ChatMessage)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      42, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ChatMessage& from_msg);
    ::google::protobuf::internal::ArenaStringPtr username_;
    ::google::protobuf::internal::ArenaStringPtr message_;
    ::uint64_t timestamp_;
    ::uint32_t user_id_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_crypto_5fprotocol_2eproto;
};
// -------------------------------------------------------------------

class AESKeyDelivery final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:crypto.AESKeyDelivery) */ {
 public:
  inline AESKeyDelivery() : AESKeyDelivery(nullptr) {}
  ~AESKeyDelivery() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(AESKeyDelivery* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(AESKeyDelivery));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AESKeyDelivery(
      ::google::protobuf::internal::ConstantInitialized);

  inline AESKeyDelivery(const AESKeyDelivery& from) : AESKeyDelivery(nullptr, from) {}
  inline AESKeyDelivery(AESKeyDelivery&& from) noexcept
      : AESKeyDelivery(nullptr, std::move(from)) {}
  inline AESKeyDelivery& operator=(const AESKeyDelivery& from) {
    CopyFrom(from);
    return *this;
  }
  inline AESKeyDelivery& operator=(AESKeyDelivery&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AESKeyDelivery& default_instance() {
    return *internal_default_instance();
  }
  static inline const AESKeyDelivery* internal_default_instance() {
    return reinterpret_cast<const AESKeyDelivery*>(
        &_AESKeyDelivery_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(AESKeyDelivery& a, AESKeyDelivery& b) { a.Swap(&b); }
  inline void Swap(AESKeyDelivery* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AESKeyDelivery* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AESKeyDelivery* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<AESKeyDelivery>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AESKeyDelivery& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const AESKeyDelivery& from) { AESKeyDelivery::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(AESKeyDelivery* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "crypto.AESKeyDelivery"; }

 protected:
  explicit AESKeyDelivery(::google::protobuf::Arena* arena);
  AESKeyDelivery(::google::protobuf::Arena* arena, const AESKeyDelivery& from);
  AESKeyDelivery(::google::protobuf::Arena* arena, AESKeyDelivery&& from) noexcept
      : AESKeyDelivery(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kEncryptedAesKeyFieldNumber = 1,
    kEncryptedAesIvFieldNumber = 2,
    kSessionIdFieldNumber = 3,
  };
  // string encrypted_aes_key = 1;
  void clear_encrypted_aes_key() ;
  const std::string& encrypted_aes_key() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_encrypted_aes_key(Arg_&& arg, Args_... args);
  std::string* mutable_encrypted_aes_key();
  PROTOBUF_NODISCARD std::string* release_encrypted_aes_key();
  void set_allocated_encrypted_aes_key(std::string* value);

  private:
  const std::string& _internal_encrypted_aes_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_encrypted_aes_key(
      const std::string& value);
  std::string* _internal_mutable_encrypted_aes_key();

  public:
  // string encrypted_aes_iv = 2;
  void clear_encrypted_aes_iv() ;
  const std::string& encrypted_aes_iv() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_encrypted_aes_iv(Arg_&& arg, Args_... args);
  std::string* mutable_encrypted_aes_iv();
  PROTOBUF_NODISCARD std::string* release_encrypted_aes_iv();
  void set_allocated_encrypted_aes_iv(std::string* value);

  private:
  const std::string& _internal_encrypted_aes_iv() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_encrypted_aes_iv(
      const std::string& value);
  std::string* _internal_mutable_encrypted_aes_iv();

  public:
  // uint32 session_id = 3;
  void clear_session_id() ;
  ::uint32_t session_id() const;
  void set_session_id(::uint32_t value);

  private:
  ::uint32_t _internal_session_id() const;
  void _internal_set_session_id(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:crypto.AESKeyDelivery)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      63, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const AESKeyDelivery& from_msg);
    ::google::protobuf::internal::ArenaStringPtr encrypted_aes_key_;
    ::google::protobuf::internal::ArenaStringPtr encrypted_aes_iv_;
    ::uint32_t session_id_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_crypto_5fprotocol_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// ClientPublicKey

// string rsa_public_key = 1;
inline void ClientPublicKey::clear_rsa_public_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.rsa_public_key_.ClearToEmpty();
}
inline const std::string& ClientPublicKey::rsa_public_key() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:crypto.ClientPublicKey.rsa_public_key)
  return _internal_rsa_public_key();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ClientPublicKey::set_rsa_public_key(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.rsa_public_key_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:crypto.ClientPublicKey.rsa_public_key)
}
inline std::string* ClientPublicKey::mutable_rsa_public_key() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_rsa_public_key();
  // @@protoc_insertion_point(field_mutable:crypto.ClientPublicKey.rsa_public_key)
  return _s;
}
inline const std::string& ClientPublicKey::_internal_rsa_public_key() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.rsa_public_key_.Get();
}
inline void ClientPublicKey::_internal_set_rsa_public_key(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.rsa_public_key_.Set(value, GetArena());
}
inline std::string* ClientPublicKey::_internal_mutable_rsa_public_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.rsa_public_key_.Mutable( GetArena());
}
inline std::string* ClientPublicKey::release_rsa_public_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:crypto.ClientPublicKey.rsa_public_key)
  return _impl_.rsa_public_key_.Release();
}
inline void ClientPublicKey::set_allocated_rsa_public_key(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.rsa_public_key_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.rsa_public_key_.IsDefault()) {
    _impl_.rsa_public_key_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:crypto.ClientPublicKey.rsa_public_key)
}

// string client_version = 2;
inline void ClientPublicKey::clear_client_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.client_version_.ClearToEmpty();
}
inline const std::string& ClientPublicKey::client_version() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:crypto.ClientPublicKey.client_version)
  return _internal_client_version();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ClientPublicKey::set_client_version(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.client_version_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:crypto.ClientPublicKey.client_version)
}
inline std::string* ClientPublicKey::mutable_client_version() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_client_version();
  // @@protoc_insertion_point(field_mutable:crypto.ClientPublicKey.client_version)
  return _s;
}
inline const std::string& ClientPublicKey::_internal_client_version() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.client_version_.Get();
}
inline void ClientPublicKey::_internal_set_client_version(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.client_version_.Set(value, GetArena());
}
inline std::string* ClientPublicKey::_internal_mutable_client_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.client_version_.Mutable( GetArena());
}
inline std::string* ClientPublicKey::release_client_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:crypto.ClientPublicKey.client_version)
  return _impl_.client_version_.Release();
}
inline void ClientPublicKey::set_allocated_client_version(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.client_version_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.client_version_.IsDefault()) {
    _impl_.client_version_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:crypto.ClientPublicKey.client_version)
}

// -------------------------------------------------------------------

// ServerPublicKey

// string rsa_public_key = 1;
inline void ServerPublicKey::clear_rsa_public_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.rsa_public_key_.ClearToEmpty();
}
inline const std::string& ServerPublicKey::rsa_public_key() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:crypto.ServerPublicKey.rsa_public_key)
  return _internal_rsa_public_key();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ServerPublicKey::set_rsa_public_key(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.rsa_public_key_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:crypto.ServerPublicKey.rsa_public_key)
}
inline std::string* ServerPublicKey::mutable_rsa_public_key() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_rsa_public_key();
  // @@protoc_insertion_point(field_mutable:crypto.ServerPublicKey.rsa_public_key)
  return _s;
}
inline const std::string& ServerPublicKey::_internal_rsa_public_key() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.rsa_public_key_.Get();
}
inline void ServerPublicKey::_internal_set_rsa_public_key(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.rsa_public_key_.Set(value, GetArena());
}
inline std::string* ServerPublicKey::_internal_mutable_rsa_public_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.rsa_public_key_.Mutable( GetArena());
}
inline std::string* ServerPublicKey::release_rsa_public_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:crypto.ServerPublicKey.rsa_public_key)
  return _impl_.rsa_public_key_.Release();
}
inline void ServerPublicKey::set_allocated_rsa_public_key(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.rsa_public_key_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.rsa_public_key_.IsDefault()) {
    _impl_.rsa_public_key_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:crypto.ServerPublicKey.rsa_public_key)
}

// string server_version = 2;
inline void ServerPublicKey::clear_server_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.server_version_.ClearToEmpty();
}
inline const std::string& ServerPublicKey::server_version() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:crypto.ServerPublicKey.server_version)
  return _internal_server_version();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ServerPublicKey::set_server_version(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.server_version_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:crypto.ServerPublicKey.server_version)
}
inline std::string* ServerPublicKey::mutable_server_version() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_server_version();
  // @@protoc_insertion_point(field_mutable:crypto.ServerPublicKey.server_version)
  return _s;
}
inline const std::string& ServerPublicKey::_internal_server_version() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.server_version_.Get();
}
inline void ServerPublicKey::_internal_set_server_version(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.server_version_.Set(value, GetArena());
}
inline std::string* ServerPublicKey::_internal_mutable_server_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.server_version_.Mutable( GetArena());
}
inline std::string* ServerPublicKey::release_server_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:crypto.ServerPublicKey.server_version)
  return _impl_.server_version_.Release();
}
inline void ServerPublicKey::set_allocated_server_version(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.server_version_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.server_version_.IsDefault()) {
    _impl_.server_version_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:crypto.ServerPublicKey.server_version)
}

// uint32 session_id = 3;
inline void ServerPublicKey::clear_session_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.session_id_ = 0u;
}
inline ::uint32_t ServerPublicKey::session_id() const {
  // @@protoc_insertion_point(field_get:crypto.ServerPublicKey.session_id)
  return _internal_session_id();
}
inline void ServerPublicKey::set_session_id(::uint32_t value) {
  _internal_set_session_id(value);
  // @@protoc_insertion_point(field_set:crypto.ServerPublicKey.session_id)
}
inline ::uint32_t ServerPublicKey::_internal_session_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.session_id_;
}
inline void ServerPublicKey::_internal_set_session_id(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.session_id_ = value;
}

// -------------------------------------------------------------------

// AESKeyDelivery

// string encrypted_aes_key = 1;
inline void AESKeyDelivery::clear_encrypted_aes_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.encrypted_aes_key_.ClearToEmpty();
}
inline const std::string& AESKeyDelivery::encrypted_aes_key() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:crypto.AESKeyDelivery.encrypted_aes_key)
  return _internal_encrypted_aes_key();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AESKeyDelivery::set_encrypted_aes_key(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.encrypted_aes_key_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:crypto.AESKeyDelivery.encrypted_aes_key)
}
inline std::string* AESKeyDelivery::mutable_encrypted_aes_key() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_encrypted_aes_key();
  // @@protoc_insertion_point(field_mutable:crypto.AESKeyDelivery.encrypted_aes_key)
  return _s;
}
inline const std::string& AESKeyDelivery::_internal_encrypted_aes_key() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.encrypted_aes_key_.Get();
}
inline void AESKeyDelivery::_internal_set_encrypted_aes_key(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.encrypted_aes_key_.Set(value, GetArena());
}
inline std::string* AESKeyDelivery::_internal_mutable_encrypted_aes_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.encrypted_aes_key_.Mutable( GetArena());
}
inline std::string* AESKeyDelivery::release_encrypted_aes_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:crypto.AESKeyDelivery.encrypted_aes_key)
  return _impl_.encrypted_aes_key_.Release();
}
inline void AESKeyDelivery::set_allocated_encrypted_aes_key(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.encrypted_aes_key_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.encrypted_aes_key_.IsDefault()) {
    _impl_.encrypted_aes_key_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:crypto.AESKeyDelivery.encrypted_aes_key)
}

// string encrypted_aes_iv = 2;
inline void AESKeyDelivery::clear_encrypted_aes_iv() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.encrypted_aes_iv_.ClearToEmpty();
}
inline const std::string& AESKeyDelivery::encrypted_aes_iv() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:crypto.AESKeyDelivery.encrypted_aes_iv)
  return _internal_encrypted_aes_iv();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AESKeyDelivery::set_encrypted_aes_iv(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.encrypted_aes_iv_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:crypto.AESKeyDelivery.encrypted_aes_iv)
}
inline std::string* AESKeyDelivery::mutable_encrypted_aes_iv() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_encrypted_aes_iv();
  // @@protoc_insertion_point(field_mutable:crypto.AESKeyDelivery.encrypted_aes_iv)
  return _s;
}
inline const std::string& AESKeyDelivery::_internal_encrypted_aes_iv() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.encrypted_aes_iv_.Get();
}
inline void AESKeyDelivery::_internal_set_encrypted_aes_iv(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.encrypted_aes_iv_.Set(value, GetArena());
}
inline std::string* AESKeyDelivery::_internal_mutable_encrypted_aes_iv() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.encrypted_aes_iv_.Mutable( GetArena());
}
inline std::string* AESKeyDelivery::release_encrypted_aes_iv() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:crypto.AESKeyDelivery.encrypted_aes_iv)
  return _impl_.encrypted_aes_iv_.Release();
}
inline void AESKeyDelivery::set_allocated_encrypted_aes_iv(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.encrypted_aes_iv_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.encrypted_aes_iv_.IsDefault()) {
    _impl_.encrypted_aes_iv_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:crypto.AESKeyDelivery.encrypted_aes_iv)
}

// uint32 session_id = 3;
inline void AESKeyDelivery::clear_session_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.session_id_ = 0u;
}
inline ::uint32_t AESKeyDelivery::session_id() const {
  // @@protoc_insertion_point(field_get:crypto.AESKeyDelivery.session_id)
  return _internal_session_id();
}
inline void AESKeyDelivery::set_session_id(::uint32_t value) {
  _internal_set_session_id(value);
  // @@protoc_insertion_point(field_set:crypto.AESKeyDelivery.session_id)
}
inline ::uint32_t AESKeyDelivery::_internal_session_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.session_id_;
}
inline void AESKeyDelivery::_internal_set_session_id(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.session_id_ = value;
}

// -------------------------------------------------------------------

// HandshakeComplete

// uint32 session_id = 1;
inline void HandshakeComplete::clear_session_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.session_id_ = 0u;
}
inline ::uint32_t HandshakeComplete::session_id() const {
  // @@protoc_insertion_point(field_get:crypto.HandshakeComplete.session_id)
  return _internal_session_id();
}
inline void HandshakeComplete::set_session_id(::uint32_t value) {
  _internal_set_session_id(value);
  // @@protoc_insertion_point(field_set:crypto.HandshakeComplete.session_id)
}
inline ::uint32_t HandshakeComplete::_internal_session_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.session_id_;
}
inline void HandshakeComplete::_internal_set_session_id(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.session_id_ = value;
}

// string status = 2;
inline void HandshakeComplete::clear_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_.ClearToEmpty();
}
inline const std::string& HandshakeComplete::status() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:crypto.HandshakeComplete.status)
  return _internal_status();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void HandshakeComplete::set_status(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:crypto.HandshakeComplete.status)
}
inline std::string* HandshakeComplete::mutable_status() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:crypto.HandshakeComplete.status)
  return _s;
}
inline const std::string& HandshakeComplete::_internal_status() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.status_.Get();
}
inline void HandshakeComplete::_internal_set_status(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_.Set(value, GetArena());
}
inline std::string* HandshakeComplete::_internal_mutable_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.status_.Mutable( GetArena());
}
inline std::string* HandshakeComplete::release_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:crypto.HandshakeComplete.status)
  return _impl_.status_.Release();
}
inline void HandshakeComplete::set_allocated_status(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.status_.IsDefault()) {
    _impl_.status_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:crypto.HandshakeComplete.status)
}

// string test_message = 3;
inline void HandshakeComplete::clear_test_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.test_message_.ClearToEmpty();
}
inline const std::string& HandshakeComplete::test_message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:crypto.HandshakeComplete.test_message)
  return _internal_test_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void HandshakeComplete::set_test_message(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.test_message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:crypto.HandshakeComplete.test_message)
}
inline std::string* HandshakeComplete::mutable_test_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_test_message();
  // @@protoc_insertion_point(field_mutable:crypto.HandshakeComplete.test_message)
  return _s;
}
inline const std::string& HandshakeComplete::_internal_test_message() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.test_message_.Get();
}
inline void HandshakeComplete::_internal_set_test_message(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.test_message_.Set(value, GetArena());
}
inline std::string* HandshakeComplete::_internal_mutable_test_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.test_message_.Mutable( GetArena());
}
inline std::string* HandshakeComplete::release_test_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:crypto.HandshakeComplete.test_message)
  return _impl_.test_message_.Release();
}
inline void HandshakeComplete::set_allocated_test_message(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.test_message_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.test_message_.IsDefault()) {
    _impl_.test_message_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:crypto.HandshakeComplete.test_message)
}

// -------------------------------------------------------------------

// GameData

// uint32 message_type = 1;
inline void GameData::clear_message_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_type_ = 0u;
}
inline ::uint32_t GameData::message_type() const {
  // @@protoc_insertion_point(field_get:crypto.GameData.message_type)
  return _internal_message_type();
}
inline void GameData::set_message_type(::uint32_t value) {
  _internal_set_message_type(value);
  // @@protoc_insertion_point(field_set:crypto.GameData.message_type)
}
inline ::uint32_t GameData::_internal_message_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.message_type_;
}
inline void GameData::_internal_set_message_type(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_type_ = value;
}

// uint64 timestamp = 2;
inline void GameData::clear_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_ = ::uint64_t{0u};
}
inline ::uint64_t GameData::timestamp() const {
  // @@protoc_insertion_point(field_get:crypto.GameData.timestamp)
  return _internal_timestamp();
}
inline void GameData::set_timestamp(::uint64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:crypto.GameData.timestamp)
}
inline ::uint64_t GameData::_internal_timestamp() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.timestamp_;
}
inline void GameData::_internal_set_timestamp(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_ = value;
}

// string payload = 3;
inline void GameData::clear_payload() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.payload_.ClearToEmpty();
}
inline const std::string& GameData::payload() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:crypto.GameData.payload)
  return _internal_payload();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GameData::set_payload(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.payload_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:crypto.GameData.payload)
}
inline std::string* GameData::mutable_payload() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_payload();
  // @@protoc_insertion_point(field_mutable:crypto.GameData.payload)
  return _s;
}
inline const std::string& GameData::_internal_payload() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.payload_.Get();
}
inline void GameData::_internal_set_payload(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.payload_.Set(value, GetArena());
}
inline std::string* GameData::_internal_mutable_payload() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.payload_.Mutable( GetArena());
}
inline std::string* GameData::release_payload() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:crypto.GameData.payload)
  return _impl_.payload_.Release();
}
inline void GameData::set_allocated_payload(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.payload_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.payload_.IsDefault()) {
    _impl_.payload_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:crypto.GameData.payload)
}

// -------------------------------------------------------------------

// ChatMessage

// uint32 user_id = 1;
inline void ChatMessage::clear_user_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_id_ = 0u;
}
inline ::uint32_t ChatMessage::user_id() const {
  // @@protoc_insertion_point(field_get:crypto.ChatMessage.user_id)
  return _internal_user_id();
}
inline void ChatMessage::set_user_id(::uint32_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:crypto.ChatMessage.user_id)
}
inline ::uint32_t ChatMessage::_internal_user_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.user_id_;
}
inline void ChatMessage::_internal_set_user_id(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_id_ = value;
}

// string username = 2;
inline void ChatMessage::clear_username() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.username_.ClearToEmpty();
}
inline const std::string& ChatMessage::username() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:crypto.ChatMessage.username)
  return _internal_username();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ChatMessage::set_username(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.username_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:crypto.ChatMessage.username)
}
inline std::string* ChatMessage::mutable_username() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_username();
  // @@protoc_insertion_point(field_mutable:crypto.ChatMessage.username)
  return _s;
}
inline const std::string& ChatMessage::_internal_username() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.username_.Get();
}
inline void ChatMessage::_internal_set_username(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.username_.Set(value, GetArena());
}
inline std::string* ChatMessage::_internal_mutable_username() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.username_.Mutable( GetArena());
}
inline std::string* ChatMessage::release_username() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:crypto.ChatMessage.username)
  return _impl_.username_.Release();
}
inline void ChatMessage::set_allocated_username(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.username_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.username_.IsDefault()) {
    _impl_.username_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:crypto.ChatMessage.username)
}

// string message = 3;
inline void ChatMessage::clear_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.ClearToEmpty();
}
inline const std::string& ChatMessage::message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:crypto.ChatMessage.message)
  return _internal_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ChatMessage::set_message(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:crypto.ChatMessage.message)
}
inline std::string* ChatMessage::mutable_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:crypto.ChatMessage.message)
  return _s;
}
inline const std::string& ChatMessage::_internal_message() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.message_.Get();
}
inline void ChatMessage::_internal_set_message(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(value, GetArena());
}
inline std::string* ChatMessage::_internal_mutable_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.message_.Mutable( GetArena());
}
inline std::string* ChatMessage::release_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:crypto.ChatMessage.message)
  return _impl_.message_.Release();
}
inline void ChatMessage::set_allocated_message(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:crypto.ChatMessage.message)
}

// uint64 timestamp = 4;
inline void ChatMessage::clear_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_ = ::uint64_t{0u};
}
inline ::uint64_t ChatMessage::timestamp() const {
  // @@protoc_insertion_point(field_get:crypto.ChatMessage.timestamp)
  return _internal_timestamp();
}
inline void ChatMessage::set_timestamp(::uint64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:crypto.ChatMessage.timestamp)
}
inline ::uint64_t ChatMessage::_internal_timestamp() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.timestamp_;
}
inline void ChatMessage::_internal_set_timestamp(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_ = value;
}

// -------------------------------------------------------------------

// ServerResponse

// uint32 request_id = 1;
inline void ServerResponse::clear_request_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.request_id_ = 0u;
}
inline ::uint32_t ServerResponse::request_id() const {
  // @@protoc_insertion_point(field_get:crypto.ServerResponse.request_id)
  return _internal_request_id();
}
inline void ServerResponse::set_request_id(::uint32_t value) {
  _internal_set_request_id(value);
  // @@protoc_insertion_point(field_set:crypto.ServerResponse.request_id)
}
inline ::uint32_t ServerResponse::_internal_request_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.request_id_;
}
inline void ServerResponse::_internal_set_request_id(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.request_id_ = value;
}

// int32 result_code = 2;
inline void ServerResponse::clear_result_code() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.result_code_ = 0;
}
inline ::int32_t ServerResponse::result_code() const {
  // @@protoc_insertion_point(field_get:crypto.ServerResponse.result_code)
  return _internal_result_code();
}
inline void ServerResponse::set_result_code(::int32_t value) {
  _internal_set_result_code(value);
  // @@protoc_insertion_point(field_set:crypto.ServerResponse.result_code)
}
inline ::int32_t ServerResponse::_internal_result_code() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.result_code_;
}
inline void ServerResponse::_internal_set_result_code(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.result_code_ = value;
}

// string result_message = 3;
inline void ServerResponse::clear_result_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.result_message_.ClearToEmpty();
}
inline const std::string& ServerResponse::result_message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:crypto.ServerResponse.result_message)
  return _internal_result_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ServerResponse::set_result_message(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.result_message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:crypto.ServerResponse.result_message)
}
inline std::string* ServerResponse::mutable_result_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_result_message();
  // @@protoc_insertion_point(field_mutable:crypto.ServerResponse.result_message)
  return _s;
}
inline const std::string& ServerResponse::_internal_result_message() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.result_message_.Get();
}
inline void ServerResponse::_internal_set_result_message(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.result_message_.Set(value, GetArena());
}
inline std::string* ServerResponse::_internal_mutable_result_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.result_message_.Mutable( GetArena());
}
inline std::string* ServerResponse::release_result_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:crypto.ServerResponse.result_message)
  return _impl_.result_message_.Release();
}
inline void ServerResponse::set_allocated_result_message(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.result_message_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.result_message_.IsDefault()) {
    _impl_.result_message_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:crypto.ServerResponse.result_message)
}

// string data = 4;
inline void ServerResponse::clear_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.ClearToEmpty();
}
inline const std::string& ServerResponse::data() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:crypto.ServerResponse.data)
  return _internal_data();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ServerResponse::set_data(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:crypto.ServerResponse.data)
}
inline std::string* ServerResponse::mutable_data() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:crypto.ServerResponse.data)
  return _s;
}
inline const std::string& ServerResponse::_internal_data() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.data_.Get();
}
inline void ServerResponse::_internal_set_data(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.Set(value, GetArena());
}
inline std::string* ServerResponse::_internal_mutable_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.data_.Mutable( GetArena());
}
inline std::string* ServerResponse::release_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:crypto.ServerResponse.data)
  return _impl_.data_.Release();
}
inline void ServerResponse::set_allocated_data(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.data_.IsDefault()) {
    _impl_.data_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:crypto.ServerResponse.data)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace crypto


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // crypto_5fprotocol_2eproto_2epb_2eh
