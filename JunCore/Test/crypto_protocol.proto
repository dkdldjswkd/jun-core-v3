syntax = "proto3";

package crypto;

// ============================================================================
// 키 교환 단계별 메시지 정의
// ============================================================================

// 1단계: 클라이언트 → 서버 (RSA 공개키 전송)
message ClientPublicKey {
    string rsa_public_key = 1;  // DER 형식을 Base64로 인코딩한 문자열
    string client_version = 2;  // 클라이언트 버전 (선택사항)
}

// 2단계: 서버 → 클라이언트 (RSA 공개키 전송)
message ServerPublicKey {
    string rsa_public_key = 1;  // DER 형식을 Base64로 인코딩한 문자열
    string server_version = 2;  // 서버 버전 (선택사항)
    uint32 session_id = 3;      // 서버에서 할당한 세션 ID
}

// 3단계: 서버 → 클라이언트 (AES 키 전송)
message AESKeyDelivery {
    string encrypted_aes_key = 1;  // 클라이언트 공개키로 암호화된 AES 키 (Base64)
    string encrypted_aes_iv = 2;   // 클라이언트 공개키로 암호화된 AES IV (Base64)
    uint32 session_id = 3;         // 세션 ID 확인용
}

// 4단계: 클라이언트 → 서버 (핸드셰이크 완료 확인)
message HandshakeComplete {
    uint32 session_id = 1;      // 세션 ID 확인
    string status = 2;          // "success" 또는 "failure"
    string test_message = 3;    // AES로 암호화된 테스트 메시지 (Base64)
}

// ============================================================================
// 일반 통신용 메시지 (AES 암호화 후 전송)
// ============================================================================

// 일반 게임 데이터 메시지 예시
message GameData {
    uint32 message_type = 1;    // 메시지 타입 구분
    uint64 timestamp = 2;       // 타임스탬프
    string payload = 3;         // 실제 게임 데이터 (JSON, 바이너리 등)
}

// 채팅 메시지 예시
message ChatMessage {
    uint32 user_id = 1;         // 사용자 ID
    string username = 2;        // 사용자명
    string message = 3;         // 채팅 내용
    uint64 timestamp = 4;       // 전송 시간
}

// 서버 응답 메시지
message ServerResponse {
    uint32 request_id = 1;      // 요청 ID (요청-응답 매칭용)
    int32 result_code = 2;      // 결과 코드 (0: 성공, 음수: 오류)
    string result_message = 3;  // 결과 메시지
    string data = 4;            // 추가 데이터 (JSON 등)
}